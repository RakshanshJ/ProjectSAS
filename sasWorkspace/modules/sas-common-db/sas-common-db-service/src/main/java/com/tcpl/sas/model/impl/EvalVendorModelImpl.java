/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tcpl.sas.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.tcpl.sas.model.EvalVendor;
import com.tcpl.sas.model.EvalVendorModel;
import com.tcpl.sas.model.EvalVendorSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the EvalVendor service. Represents a row in the &quot;evalvendor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>EvalVendorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EvalVendorImpl}.
 * </p>
 *
 * @author Rakshansh
 * @see EvalVendorImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EvalVendorModelImpl
	extends BaseModelImpl<EvalVendor> implements EvalVendorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eval vendor model instance should use the <code>EvalVendor</code> interface instead.
	 */
	public static final String TABLE_NAME = "evalvendor";

	public static final Object[][] TABLE_COLUMNS = {
		{"evalVendorId", Types.BIGINT}, {"empName", Types.VARCHAR},
		{"empEmail", Types.VARCHAR}, {"audioId", Types.BIGINT},
		{"audioPath", Types.VARCHAR}, {"videoId", Types.BIGINT},
		{"videoPath", Types.VARCHAR}, {"imageId", Types.BIGINT},
		{"imagePath", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("evalVendorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("audioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("audioPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("videoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("videoPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imagePath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table evalvendor (evalVendorId LONG not null primary key,empName VARCHAR(75) null,empEmail VARCHAR(75) null,audioId LONG,audioPath VARCHAR(75) null,videoId LONG,videoPath VARCHAR(75) null,imageId LONG,imagePath VARCHAR(75) null,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table evalvendor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY evalVendor.evalVendorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY evalvendor.evalVendorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EvalVendor toModel(EvalVendorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EvalVendor model = new EvalVendorImpl();

		model.setEvalVendorId(soapModel.getEvalVendorId());
		model.setEmpName(soapModel.getEmpName());
		model.setEmpEmail(soapModel.getEmpEmail());
		model.setAudioId(soapModel.getAudioId());
		model.setAudioPath(soapModel.getAudioPath());
		model.setVideoId(soapModel.getVideoId());
		model.setVideoPath(soapModel.getVideoPath());
		model.setImageId(soapModel.getImageId());
		model.setImagePath(soapModel.getImagePath());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EvalVendor> toModels(EvalVendorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EvalVendor> models = new ArrayList<EvalVendor>(soapModels.length);

		for (EvalVendorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EvalVendorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _evalVendorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEvalVendorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _evalVendorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EvalVendor.class;
	}

	@Override
	public String getModelClassName() {
		return EvalVendor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EvalVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EvalVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EvalVendor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((EvalVendor)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EvalVendor, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EvalVendor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EvalVendor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EvalVendor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EvalVendor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EvalVendor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EvalVendor.class.getClassLoader(), EvalVendor.class,
			ModelWrapper.class);

		try {
			Constructor<EvalVendor> constructor =
				(Constructor<EvalVendor>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<EvalVendor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EvalVendor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EvalVendor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EvalVendor, Object>>();
		Map<String, BiConsumer<EvalVendor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EvalVendor, ?>>();

		attributeGetterFunctions.put(
			"evalVendorId", EvalVendor::getEvalVendorId);
		attributeSetterBiConsumers.put(
			"evalVendorId",
			(BiConsumer<EvalVendor, Long>)EvalVendor::setEvalVendorId);
		attributeGetterFunctions.put("empName", EvalVendor::getEmpName);
		attributeSetterBiConsumers.put(
			"empName", (BiConsumer<EvalVendor, String>)EvalVendor::setEmpName);
		attributeGetterFunctions.put("empEmail", EvalVendor::getEmpEmail);
		attributeSetterBiConsumers.put(
			"empEmail",
			(BiConsumer<EvalVendor, String>)EvalVendor::setEmpEmail);
		attributeGetterFunctions.put("audioId", EvalVendor::getAudioId);
		attributeSetterBiConsumers.put(
			"audioId", (BiConsumer<EvalVendor, Long>)EvalVendor::setAudioId);
		attributeGetterFunctions.put("audioPath", EvalVendor::getAudioPath);
		attributeSetterBiConsumers.put(
			"audioPath",
			(BiConsumer<EvalVendor, String>)EvalVendor::setAudioPath);
		attributeGetterFunctions.put("videoId", EvalVendor::getVideoId);
		attributeSetterBiConsumers.put(
			"videoId", (BiConsumer<EvalVendor, Long>)EvalVendor::setVideoId);
		attributeGetterFunctions.put("videoPath", EvalVendor::getVideoPath);
		attributeSetterBiConsumers.put(
			"videoPath",
			(BiConsumer<EvalVendor, String>)EvalVendor::setVideoPath);
		attributeGetterFunctions.put("imageId", EvalVendor::getImageId);
		attributeSetterBiConsumers.put(
			"imageId", (BiConsumer<EvalVendor, Long>)EvalVendor::setImageId);
		attributeGetterFunctions.put("imagePath", EvalVendor::getImagePath);
		attributeSetterBiConsumers.put(
			"imagePath",
			(BiConsumer<EvalVendor, String>)EvalVendor::setImagePath);
		attributeGetterFunctions.put("groupId", EvalVendor::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<EvalVendor, Long>)EvalVendor::setGroupId);
		attributeGetterFunctions.put("userId", EvalVendor::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<EvalVendor, Long>)EvalVendor::setUserId);
		attributeGetterFunctions.put("createDate", EvalVendor::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EvalVendor, Date>)EvalVendor::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EvalVendor::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EvalVendor, Date>)EvalVendor::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getEvalVendorId() {
		return _evalVendorId;
	}

	@Override
	public void setEvalVendorId(long evalVendorId) {
		_evalVendorId = evalVendorId;
	}

	@JSON
	@Override
	public String getEmpName() {
		if (_empName == null) {
			return "";
		}
		else {
			return _empName;
		}
	}

	@Override
	public void setEmpName(String empName) {
		_empName = empName;
	}

	@JSON
	@Override
	public String getEmpEmail() {
		if (_empEmail == null) {
			return "";
		}
		else {
			return _empEmail;
		}
	}

	@Override
	public void setEmpEmail(String empEmail) {
		_empEmail = empEmail;
	}

	@JSON
	@Override
	public long getAudioId() {
		return _audioId;
	}

	@Override
	public void setAudioId(long audioId) {
		_audioId = audioId;
	}

	@JSON
	@Override
	public String getAudioPath() {
		if (_audioPath == null) {
			return "";
		}
		else {
			return _audioPath;
		}
	}

	@Override
	public void setAudioPath(String audioPath) {
		_audioPath = audioPath;
	}

	@JSON
	@Override
	public long getVideoId() {
		return _videoId;
	}

	@Override
	public void setVideoId(long videoId) {
		_videoId = videoId;
	}

	@JSON
	@Override
	public String getVideoPath() {
		if (_videoPath == null) {
			return "";
		}
		else {
			return _videoPath;
		}
	}

	@Override
	public void setVideoPath(String videoPath) {
		_videoPath = videoPath;
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public String getImagePath() {
		if (_imagePath == null) {
			return "";
		}
		else {
			return _imagePath;
		}
	}

	@Override
	public void setImagePath(String imagePath) {
		_imagePath = imagePath;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EvalVendor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EvalVendor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EvalVendorImpl evalVendorImpl = new EvalVendorImpl();

		evalVendorImpl.setEvalVendorId(getEvalVendorId());
		evalVendorImpl.setEmpName(getEmpName());
		evalVendorImpl.setEmpEmail(getEmpEmail());
		evalVendorImpl.setAudioId(getAudioId());
		evalVendorImpl.setAudioPath(getAudioPath());
		evalVendorImpl.setVideoId(getVideoId());
		evalVendorImpl.setVideoPath(getVideoPath());
		evalVendorImpl.setImageId(getImageId());
		evalVendorImpl.setImagePath(getImagePath());
		evalVendorImpl.setGroupId(getGroupId());
		evalVendorImpl.setUserId(getUserId());
		evalVendorImpl.setCreateDate(getCreateDate());
		evalVendorImpl.setModifiedDate(getModifiedDate());

		evalVendorImpl.resetOriginalValues();

		return evalVendorImpl;
	}

	@Override
	public int compareTo(EvalVendor evalVendor) {
		long primaryKey = evalVendor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EvalVendor)) {
			return false;
		}

		EvalVendor evalVendor = (EvalVendor)obj;

		long primaryKey = evalVendor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		EvalVendorModelImpl evalVendorModelImpl = this;

		evalVendorModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<EvalVendor> toCacheModel() {
		EvalVendorCacheModel evalVendorCacheModel = new EvalVendorCacheModel();

		evalVendorCacheModel.evalVendorId = getEvalVendorId();

		evalVendorCacheModel.empName = getEmpName();

		String empName = evalVendorCacheModel.empName;

		if ((empName != null) && (empName.length() == 0)) {
			evalVendorCacheModel.empName = null;
		}

		evalVendorCacheModel.empEmail = getEmpEmail();

		String empEmail = evalVendorCacheModel.empEmail;

		if ((empEmail != null) && (empEmail.length() == 0)) {
			evalVendorCacheModel.empEmail = null;
		}

		evalVendorCacheModel.audioId = getAudioId();

		evalVendorCacheModel.audioPath = getAudioPath();

		String audioPath = evalVendorCacheModel.audioPath;

		if ((audioPath != null) && (audioPath.length() == 0)) {
			evalVendorCacheModel.audioPath = null;
		}

		evalVendorCacheModel.videoId = getVideoId();

		evalVendorCacheModel.videoPath = getVideoPath();

		String videoPath = evalVendorCacheModel.videoPath;

		if ((videoPath != null) && (videoPath.length() == 0)) {
			evalVendorCacheModel.videoPath = null;
		}

		evalVendorCacheModel.imageId = getImageId();

		evalVendorCacheModel.imagePath = getImagePath();

		String imagePath = evalVendorCacheModel.imagePath;

		if ((imagePath != null) && (imagePath.length() == 0)) {
			evalVendorCacheModel.imagePath = null;
		}

		evalVendorCacheModel.groupId = getGroupId();

		evalVendorCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			evalVendorCacheModel.createDate = createDate.getTime();
		}
		else {
			evalVendorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			evalVendorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			evalVendorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return evalVendorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EvalVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EvalVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EvalVendor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EvalVendor)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EvalVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EvalVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EvalVendor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EvalVendor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, EvalVendor>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _evalVendorId;
	private String _empName;
	private String _empEmail;
	private long _audioId;
	private String _audioPath;
	private long _videoId;
	private String _videoPath;
	private long _imageId;
	private String _imagePath;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private EvalVendor _escapedModel;

}