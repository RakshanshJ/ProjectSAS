/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tcpl.sas.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.tcpl.sas.model.RequirementData;
import com.tcpl.sas.model.RequirementDataModel;
import com.tcpl.sas.model.RequirementDataSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the RequirementData service. Represents a row in the &quot;requirementdata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>RequirementDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequirementDataImpl}.
 * </p>
 *
 * @author Rakshansh
 * @see RequirementDataImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class RequirementDataModelImpl
	extends BaseModelImpl<RequirementData> implements RequirementDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a requirement data model instance should use the <code>RequirementData</code> interface instead.
	 */
	public static final String TABLE_NAME = "requirementdata";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"requirementDataId", Types.BIGINT},
		{"skillSetId", Types.VARCHAR}, {"experience", Types.BIGINT},
		{"jd", Types.VARCHAR}, {"budget", Types.BIGINT},
		{"remarks", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requirementDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("skillSetId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experience", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jd", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("budget", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table requirementdata (uuid_ VARCHAR(75) null,requirementDataId LONG not null primary key,skillSetId VARCHAR(75) null,experience LONG,jd VARCHAR(75) null,budget LONG,remarks VARCHAR(75) null,status VARCHAR(75) null,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table requirementdata";

	public static final String ORDER_BY_JPQL =
		" ORDER BY requirementData.requirementDataId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY requirementdata.requirementDataId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long REQUIREMENTDATAID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RequirementData toModel(RequirementDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RequirementData model = new RequirementDataImpl();

		model.setUuid(soapModel.getUuid());
		model.setRequirementDataId(soapModel.getRequirementDataId());
		model.setSkillSetId(soapModel.getSkillSetId());
		model.setExperience(soapModel.getExperience());
		model.setJd(soapModel.getJd());
		model.setBudget(soapModel.getBudget());
		model.setRemarks(soapModel.getRemarks());
		model.setStatus(soapModel.getStatus());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RequirementData> toModels(
		RequirementDataSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<RequirementData> models = new ArrayList<RequirementData>(
			soapModels.length);

		for (RequirementDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RequirementDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requirementDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequirementDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requirementDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RequirementData.class;
	}

	@Override
	public String getModelClassName() {
		return RequirementData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<RequirementData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<RequirementData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RequirementData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((RequirementData)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<RequirementData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<RequirementData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(RequirementData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<RequirementData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<RequirementData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, RequirementData>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			RequirementData.class.getClassLoader(), RequirementData.class,
			ModelWrapper.class);

		try {
			Constructor<RequirementData> constructor =
				(Constructor<RequirementData>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<RequirementData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<RequirementData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<RequirementData, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<RequirementData, Object>>();
		Map<String, BiConsumer<RequirementData, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<RequirementData, ?>>();

		attributeGetterFunctions.put("uuid", RequirementData::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<RequirementData, String>)RequirementData::setUuid);
		attributeGetterFunctions.put(
			"requirementDataId", RequirementData::getRequirementDataId);
		attributeSetterBiConsumers.put(
			"requirementDataId",
			(BiConsumer<RequirementData, Long>)
				RequirementData::setRequirementDataId);
		attributeGetterFunctions.put(
			"skillSetId", RequirementData::getSkillSetId);
		attributeSetterBiConsumers.put(
			"skillSetId",
			(BiConsumer<RequirementData, String>)
				RequirementData::setSkillSetId);
		attributeGetterFunctions.put(
			"experience", RequirementData::getExperience);
		attributeSetterBiConsumers.put(
			"experience",
			(BiConsumer<RequirementData, Long>)RequirementData::setExperience);
		attributeGetterFunctions.put("jd", RequirementData::getJd);
		attributeSetterBiConsumers.put(
			"jd", (BiConsumer<RequirementData, String>)RequirementData::setJd);
		attributeGetterFunctions.put("budget", RequirementData::getBudget);
		attributeSetterBiConsumers.put(
			"budget",
			(BiConsumer<RequirementData, Long>)RequirementData::setBudget);
		attributeGetterFunctions.put("remarks", RequirementData::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<RequirementData, String>)RequirementData::setRemarks);
		attributeGetterFunctions.put("status", RequirementData::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<RequirementData, String>)RequirementData::setStatus);
		attributeGetterFunctions.put("groupId", RequirementData::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<RequirementData, Long>)RequirementData::setGroupId);
		attributeGetterFunctions.put("userId", RequirementData::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<RequirementData, Long>)RequirementData::setUserId);
		attributeGetterFunctions.put(
			"createDate", RequirementData::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<RequirementData, Date>)RequirementData::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", RequirementData::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<RequirementData, Date>)
				RequirementData::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRequirementDataId() {
		return _requirementDataId;
	}

	@Override
	public void setRequirementDataId(long requirementDataId) {
		_columnBitmask = -1L;

		if (!_setOriginalRequirementDataId) {
			_setOriginalRequirementDataId = true;

			_originalRequirementDataId = _requirementDataId;
		}

		_requirementDataId = requirementDataId;
	}

	public long getOriginalRequirementDataId() {
		return _originalRequirementDataId;
	}

	@JSON
	@Override
	public String getSkillSetId() {
		if (_skillSetId == null) {
			return "";
		}
		else {
			return _skillSetId;
		}
	}

	@Override
	public void setSkillSetId(String skillSetId) {
		_skillSetId = skillSetId;
	}

	@JSON
	@Override
	public long getExperience() {
		return _experience;
	}

	@Override
	public void setExperience(long experience) {
		_experience = experience;
	}

	@JSON
	@Override
	public String getJd() {
		if (_jd == null) {
			return "";
		}
		else {
			return _jd;
		}
	}

	@Override
	public void setJd(String jd) {
		_jd = jd;
	}

	@JSON
	@Override
	public long getBudget() {
		return _budget;
	}

	@Override
	public void setBudget(long budget) {
		_budget = budget;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, RequirementData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RequirementData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RequirementDataImpl requirementDataImpl = new RequirementDataImpl();

		requirementDataImpl.setUuid(getUuid());
		requirementDataImpl.setRequirementDataId(getRequirementDataId());
		requirementDataImpl.setSkillSetId(getSkillSetId());
		requirementDataImpl.setExperience(getExperience());
		requirementDataImpl.setJd(getJd());
		requirementDataImpl.setBudget(getBudget());
		requirementDataImpl.setRemarks(getRemarks());
		requirementDataImpl.setStatus(getStatus());
		requirementDataImpl.setGroupId(getGroupId());
		requirementDataImpl.setUserId(getUserId());
		requirementDataImpl.setCreateDate(getCreateDate());
		requirementDataImpl.setModifiedDate(getModifiedDate());

		requirementDataImpl.resetOriginalValues();

		return requirementDataImpl;
	}

	@Override
	public int compareTo(RequirementData requirementData) {
		int value = 0;

		if (getRequirementDataId() < requirementData.getRequirementDataId()) {
			value = -1;
		}
		else if (getRequirementDataId() >
					requirementData.getRequirementDataId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RequirementData)) {
			return false;
		}

		RequirementData requirementData = (RequirementData)obj;

		long primaryKey = requirementData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		RequirementDataModelImpl requirementDataModelImpl = this;

		requirementDataModelImpl._originalUuid = requirementDataModelImpl._uuid;

		requirementDataModelImpl._originalRequirementDataId =
			requirementDataModelImpl._requirementDataId;

		requirementDataModelImpl._setOriginalRequirementDataId = false;

		requirementDataModelImpl._originalStatus =
			requirementDataModelImpl._status;

		requirementDataModelImpl._originalGroupId =
			requirementDataModelImpl._groupId;

		requirementDataModelImpl._setOriginalGroupId = false;

		requirementDataModelImpl._setModifiedDate = false;

		requirementDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RequirementData> toCacheModel() {
		RequirementDataCacheModel requirementDataCacheModel =
			new RequirementDataCacheModel();

		requirementDataCacheModel.uuid = getUuid();

		String uuid = requirementDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			requirementDataCacheModel.uuid = null;
		}

		requirementDataCacheModel.requirementDataId = getRequirementDataId();

		requirementDataCacheModel.skillSetId = getSkillSetId();

		String skillSetId = requirementDataCacheModel.skillSetId;

		if ((skillSetId != null) && (skillSetId.length() == 0)) {
			requirementDataCacheModel.skillSetId = null;
		}

		requirementDataCacheModel.experience = getExperience();

		requirementDataCacheModel.jd = getJd();

		String jd = requirementDataCacheModel.jd;

		if ((jd != null) && (jd.length() == 0)) {
			requirementDataCacheModel.jd = null;
		}

		requirementDataCacheModel.budget = getBudget();

		requirementDataCacheModel.remarks = getRemarks();

		String remarks = requirementDataCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			requirementDataCacheModel.remarks = null;
		}

		requirementDataCacheModel.status = getStatus();

		String status = requirementDataCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			requirementDataCacheModel.status = null;
		}

		requirementDataCacheModel.groupId = getGroupId();

		requirementDataCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			requirementDataCacheModel.createDate = createDate.getTime();
		}
		else {
			requirementDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			requirementDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			requirementDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return requirementDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<RequirementData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<RequirementData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RequirementData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((RequirementData)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<RequirementData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<RequirementData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<RequirementData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((RequirementData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, RequirementData>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _requirementDataId;
	private long _originalRequirementDataId;
	private boolean _setOriginalRequirementDataId;
	private String _skillSetId;
	private long _experience;
	private String _jd;
	private long _budget;
	private String _remarks;
	private String _status;
	private String _originalStatus;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private RequirementData _escapedModel;

}