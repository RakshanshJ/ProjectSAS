/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tcpl.sas.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.tcpl.sas.model.SkillSet;
import com.tcpl.sas.model.SkillSetModel;
import com.tcpl.sas.model.SkillSetSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the SkillSet service. Represents a row in the &quot;skillset&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SkillSetModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SkillSetImpl}.
 * </p>
 *
 * @author Rakshansh
 * @see SkillSetImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SkillSetModelImpl
	extends BaseModelImpl<SkillSet> implements SkillSetModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a skill set model instance should use the <code>SkillSet</code> interface instead.
	 */
	public static final String TABLE_NAME = "skillset";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"skillSetId", Types.BIGINT},
		{"skillSetName", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("skillSetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("skillSetName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table skillset (uuid_ VARCHAR(75) null,skillSetId LONG not null primary key,skillSetName VARCHAR(75) null,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table skillset";

	public static final String ORDER_BY_JPQL =
		" ORDER BY skillSet.skillSetName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY skillset.skillSetName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long UUID_COLUMN_BITMASK = 2L;

	public static final long SKILLSETNAME_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SkillSet toModel(SkillSetSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SkillSet model = new SkillSetImpl();

		model.setUuid(soapModel.getUuid());
		model.setSkillSetId(soapModel.getSkillSetId());
		model.setSkillSetName(soapModel.getSkillSetName());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SkillSet> toModels(SkillSetSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SkillSet> models = new ArrayList<SkillSet>(soapModels.length);

		for (SkillSetSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SkillSetModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _skillSetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSkillSetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _skillSetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SkillSet.class;
	}

	@Override
	public String getModelClassName() {
		return SkillSet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SkillSet, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SkillSet, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SkillSet, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SkillSet)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SkillSet, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SkillSet, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SkillSet)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SkillSet, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SkillSet, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SkillSet>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SkillSet.class.getClassLoader(), SkillSet.class,
			ModelWrapper.class);

		try {
			Constructor<SkillSet> constructor =
				(Constructor<SkillSet>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<SkillSet, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SkillSet, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SkillSet, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SkillSet, Object>>();
		Map<String, BiConsumer<SkillSet, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SkillSet, ?>>();

		attributeGetterFunctions.put("uuid", SkillSet::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<SkillSet, String>)SkillSet::setUuid);
		attributeGetterFunctions.put("skillSetId", SkillSet::getSkillSetId);
		attributeSetterBiConsumers.put(
			"skillSetId", (BiConsumer<SkillSet, Long>)SkillSet::setSkillSetId);
		attributeGetterFunctions.put("skillSetName", SkillSet::getSkillSetName);
		attributeSetterBiConsumers.put(
			"skillSetName",
			(BiConsumer<SkillSet, String>)SkillSet::setSkillSetName);
		attributeGetterFunctions.put("groupId", SkillSet::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<SkillSet, Long>)SkillSet::setGroupId);
		attributeGetterFunctions.put("userId", SkillSet::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<SkillSet, Long>)SkillSet::setUserId);
		attributeGetterFunctions.put("createDate", SkillSet::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<SkillSet, Date>)SkillSet::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", SkillSet::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SkillSet, Date>)SkillSet::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSkillSetId() {
		return _skillSetId;
	}

	@Override
	public void setSkillSetId(long skillSetId) {
		_skillSetId = skillSetId;
	}

	@JSON
	@Override
	public String getSkillSetName() {
		if (_skillSetName == null) {
			return "";
		}
		else {
			return _skillSetName;
		}
	}

	@Override
	public void setSkillSetName(String skillSetName) {
		_columnBitmask = -1L;

		_skillSetName = skillSetName;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SkillSet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SkillSet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SkillSetImpl skillSetImpl = new SkillSetImpl();

		skillSetImpl.setUuid(getUuid());
		skillSetImpl.setSkillSetId(getSkillSetId());
		skillSetImpl.setSkillSetName(getSkillSetName());
		skillSetImpl.setGroupId(getGroupId());
		skillSetImpl.setUserId(getUserId());
		skillSetImpl.setCreateDate(getCreateDate());
		skillSetImpl.setModifiedDate(getModifiedDate());

		skillSetImpl.resetOriginalValues();

		return skillSetImpl;
	}

	@Override
	public int compareTo(SkillSet skillSet) {
		int value = 0;

		value = getSkillSetName().compareTo(skillSet.getSkillSetName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SkillSet)) {
			return false;
		}

		SkillSet skillSet = (SkillSet)obj;

		long primaryKey = skillSet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		SkillSetModelImpl skillSetModelImpl = this;

		skillSetModelImpl._originalUuid = skillSetModelImpl._uuid;

		skillSetModelImpl._originalGroupId = skillSetModelImpl._groupId;

		skillSetModelImpl._setOriginalGroupId = false;

		skillSetModelImpl._setModifiedDate = false;

		skillSetModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SkillSet> toCacheModel() {
		SkillSetCacheModel skillSetCacheModel = new SkillSetCacheModel();

		skillSetCacheModel.uuid = getUuid();

		String uuid = skillSetCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			skillSetCacheModel.uuid = null;
		}

		skillSetCacheModel.skillSetId = getSkillSetId();

		skillSetCacheModel.skillSetName = getSkillSetName();

		String skillSetName = skillSetCacheModel.skillSetName;

		if ((skillSetName != null) && (skillSetName.length() == 0)) {
			skillSetCacheModel.skillSetName = null;
		}

		skillSetCacheModel.groupId = getGroupId();

		skillSetCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			skillSetCacheModel.createDate = createDate.getTime();
		}
		else {
			skillSetCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			skillSetCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			skillSetCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return skillSetCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SkillSet, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SkillSet, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SkillSet, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SkillSet)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SkillSet, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SkillSet, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SkillSet, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SkillSet)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, SkillSet>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _skillSetId;
	private String _skillSetName;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private SkillSet _escapedModel;

}