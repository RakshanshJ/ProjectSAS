/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tcpl.sas.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.tcpl.sas.model.SourceVendor;
import com.tcpl.sas.model.SourceVendorModel;
import com.tcpl.sas.model.SourceVendorSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the SourceVendor service. Represents a row in the &quot;sourcevendor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>SourceVendorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SourceVendorImpl}.
 * </p>
 *
 * @author Rakshansh
 * @see SourceVendorImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SourceVendorModelImpl
	extends BaseModelImpl<SourceVendor> implements SourceVendorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a source vendor model instance should use the <code>SourceVendor</code> interface instead.
	 */
	public static final String TABLE_NAME = "sourcevendor";

	public static final Object[][] TABLE_COLUMNS = {
		{"sourceVendorId", Types.BIGINT}, {"empName", Types.VARCHAR},
		{"empEmail", Types.VARCHAR}, {"empMobile", Types.VARCHAR},
		{"empDob", Types.TIMESTAMP}, {"empExperience", Types.BIGINT},
		{"empLocation", Types.VARCHAR}, {"cvId", Types.BIGINT},
		{"cvPath", Types.VARCHAR}, {"statusByCustomer", Types.VARCHAR},
		{"statusByRM", Types.BOOLEAN}, {"deployedOnCustomer", Types.BOOLEAN},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sourceVendorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empMobile", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("empDob", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("empExperience", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("empLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cvId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cvPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusByCustomer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusByRM", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("deployedOnCustomer", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table sourcevendor (sourceVendorId LONG not null primary key,empName VARCHAR(75) null,empEmail VARCHAR(75) null,empMobile VARCHAR(75) null,empDob DATE null,empExperience LONG,empLocation VARCHAR(75) null,cvId LONG,cvPath VARCHAR(75) null,statusByCustomer VARCHAR(75) null,statusByRM BOOLEAN,deployedOnCustomer BOOLEAN,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table sourcevendor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sourceVendor.sourceVendorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY sourcevendor.sourceVendorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SourceVendor toModel(SourceVendorSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SourceVendor model = new SourceVendorImpl();

		model.setSourceVendorId(soapModel.getSourceVendorId());
		model.setEmpName(soapModel.getEmpName());
		model.setEmpEmail(soapModel.getEmpEmail());
		model.setEmpMobile(soapModel.getEmpMobile());
		model.setEmpDob(soapModel.getEmpDob());
		model.setEmpExperience(soapModel.getEmpExperience());
		model.setEmpLocation(soapModel.getEmpLocation());
		model.setCvId(soapModel.getCvId());
		model.setCvPath(soapModel.getCvPath());
		model.setStatusByCustomer(soapModel.getStatusByCustomer());
		model.setStatusByRM(soapModel.getStatusByRM());
		model.setDeployedOnCustomer(soapModel.getDeployedOnCustomer());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SourceVendor> toModels(SourceVendorSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SourceVendor> models = new ArrayList<SourceVendor>(
			soapModels.length);

		for (SourceVendorSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SourceVendorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sourceVendorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSourceVendorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sourceVendorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SourceVendor.class;
	}

	@Override
	public String getModelClassName() {
		return SourceVendor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SourceVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SourceVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SourceVendor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SourceVendor)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SourceVendor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SourceVendor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SourceVendor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SourceVendor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SourceVendor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SourceVendor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SourceVendor.class.getClassLoader(), SourceVendor.class,
			ModelWrapper.class);

		try {
			Constructor<SourceVendor> constructor =
				(Constructor<SourceVendor>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<SourceVendor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SourceVendor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SourceVendor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SourceVendor, Object>>();
		Map<String, BiConsumer<SourceVendor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SourceVendor, ?>>();

		attributeGetterFunctions.put(
			"sourceVendorId", SourceVendor::getSourceVendorId);
		attributeSetterBiConsumers.put(
			"sourceVendorId",
			(BiConsumer<SourceVendor, Long>)SourceVendor::setSourceVendorId);
		attributeGetterFunctions.put("empName", SourceVendor::getEmpName);
		attributeSetterBiConsumers.put(
			"empName",
			(BiConsumer<SourceVendor, String>)SourceVendor::setEmpName);
		attributeGetterFunctions.put("empEmail", SourceVendor::getEmpEmail);
		attributeSetterBiConsumers.put(
			"empEmail",
			(BiConsumer<SourceVendor, String>)SourceVendor::setEmpEmail);
		attributeGetterFunctions.put("empMobile", SourceVendor::getEmpMobile);
		attributeSetterBiConsumers.put(
			"empMobile",
			(BiConsumer<SourceVendor, String>)SourceVendor::setEmpMobile);
		attributeGetterFunctions.put("empDob", SourceVendor::getEmpDob);
		attributeSetterBiConsumers.put(
			"empDob", (BiConsumer<SourceVendor, Date>)SourceVendor::setEmpDob);
		attributeGetterFunctions.put(
			"empExperience", SourceVendor::getEmpExperience);
		attributeSetterBiConsumers.put(
			"empExperience",
			(BiConsumer<SourceVendor, Long>)SourceVendor::setEmpExperience);
		attributeGetterFunctions.put(
			"empLocation", SourceVendor::getEmpLocation);
		attributeSetterBiConsumers.put(
			"empLocation",
			(BiConsumer<SourceVendor, String>)SourceVendor::setEmpLocation);
		attributeGetterFunctions.put("cvId", SourceVendor::getCvId);
		attributeSetterBiConsumers.put(
			"cvId", (BiConsumer<SourceVendor, Long>)SourceVendor::setCvId);
		attributeGetterFunctions.put("cvPath", SourceVendor::getCvPath);
		attributeSetterBiConsumers.put(
			"cvPath",
			(BiConsumer<SourceVendor, String>)SourceVendor::setCvPath);
		attributeGetterFunctions.put(
			"statusByCustomer", SourceVendor::getStatusByCustomer);
		attributeSetterBiConsumers.put(
			"statusByCustomer",
			(BiConsumer<SourceVendor, String>)
				SourceVendor::setStatusByCustomer);
		attributeGetterFunctions.put("statusByRM", SourceVendor::getStatusByRM);
		attributeSetterBiConsumers.put(
			"statusByRM",
			(BiConsumer<SourceVendor, Boolean>)SourceVendor::setStatusByRM);
		attributeGetterFunctions.put(
			"deployedOnCustomer", SourceVendor::getDeployedOnCustomer);
		attributeSetterBiConsumers.put(
			"deployedOnCustomer",
			(BiConsumer<SourceVendor, Boolean>)
				SourceVendor::setDeployedOnCustomer);
		attributeGetterFunctions.put("groupId", SourceVendor::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<SourceVendor, Long>)SourceVendor::setGroupId);
		attributeGetterFunctions.put("userId", SourceVendor::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<SourceVendor, Long>)SourceVendor::setUserId);
		attributeGetterFunctions.put("createDate", SourceVendor::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SourceVendor, Date>)SourceVendor::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", SourceVendor::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SourceVendor, Date>)SourceVendor::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSourceVendorId() {
		return _sourceVendorId;
	}

	@Override
	public void setSourceVendorId(long sourceVendorId) {
		_sourceVendorId = sourceVendorId;
	}

	@JSON
	@Override
	public String getEmpName() {
		if (_empName == null) {
			return "";
		}
		else {
			return _empName;
		}
	}

	@Override
	public void setEmpName(String empName) {
		_empName = empName;
	}

	@JSON
	@Override
	public String getEmpEmail() {
		if (_empEmail == null) {
			return "";
		}
		else {
			return _empEmail;
		}
	}

	@Override
	public void setEmpEmail(String empEmail) {
		_empEmail = empEmail;
	}

	@JSON
	@Override
	public String getEmpMobile() {
		if (_empMobile == null) {
			return "";
		}
		else {
			return _empMobile;
		}
	}

	@Override
	public void setEmpMobile(String empMobile) {
		_empMobile = empMobile;
	}

	@JSON
	@Override
	public Date getEmpDob() {
		return _empDob;
	}

	@Override
	public void setEmpDob(Date empDob) {
		_empDob = empDob;
	}

	@JSON
	@Override
	public long getEmpExperience() {
		return _empExperience;
	}

	@Override
	public void setEmpExperience(long empExperience) {
		_empExperience = empExperience;
	}

	@JSON
	@Override
	public String getEmpLocation() {
		if (_empLocation == null) {
			return "";
		}
		else {
			return _empLocation;
		}
	}

	@Override
	public void setEmpLocation(String empLocation) {
		_empLocation = empLocation;
	}

	@JSON
	@Override
	public long getCvId() {
		return _cvId;
	}

	@Override
	public void setCvId(long cvId) {
		_cvId = cvId;
	}

	@JSON
	@Override
	public String getCvPath() {
		if (_cvPath == null) {
			return "";
		}
		else {
			return _cvPath;
		}
	}

	@Override
	public void setCvPath(String cvPath) {
		_cvPath = cvPath;
	}

	@JSON
	@Override
	public String getStatusByCustomer() {
		if (_statusByCustomer == null) {
			return "";
		}
		else {
			return _statusByCustomer;
		}
	}

	@Override
	public void setStatusByCustomer(String statusByCustomer) {
		_statusByCustomer = statusByCustomer;
	}

	@JSON
	@Override
	public Boolean getStatusByRM() {
		return _statusByRM;
	}

	@Override
	public void setStatusByRM(Boolean statusByRM) {
		_statusByRM = statusByRM;
	}

	@JSON
	@Override
	public Boolean getDeployedOnCustomer() {
		return _deployedOnCustomer;
	}

	@Override
	public void setDeployedOnCustomer(Boolean deployedOnCustomer) {
		_deployedOnCustomer = deployedOnCustomer;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SourceVendor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SourceVendor toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SourceVendorImpl sourceVendorImpl = new SourceVendorImpl();

		sourceVendorImpl.setSourceVendorId(getSourceVendorId());
		sourceVendorImpl.setEmpName(getEmpName());
		sourceVendorImpl.setEmpEmail(getEmpEmail());
		sourceVendorImpl.setEmpMobile(getEmpMobile());
		sourceVendorImpl.setEmpDob(getEmpDob());
		sourceVendorImpl.setEmpExperience(getEmpExperience());
		sourceVendorImpl.setEmpLocation(getEmpLocation());
		sourceVendorImpl.setCvId(getCvId());
		sourceVendorImpl.setCvPath(getCvPath());
		sourceVendorImpl.setStatusByCustomer(getStatusByCustomer());
		sourceVendorImpl.setStatusByRM(getStatusByRM());
		sourceVendorImpl.setDeployedOnCustomer(getDeployedOnCustomer());
		sourceVendorImpl.setGroupId(getGroupId());
		sourceVendorImpl.setUserId(getUserId());
		sourceVendorImpl.setCreateDate(getCreateDate());
		sourceVendorImpl.setModifiedDate(getModifiedDate());

		sourceVendorImpl.resetOriginalValues();

		return sourceVendorImpl;
	}

	@Override
	public int compareTo(SourceVendor sourceVendor) {
		long primaryKey = sourceVendor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SourceVendor)) {
			return false;
		}

		SourceVendor sourceVendor = (SourceVendor)obj;

		long primaryKey = sourceVendor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		SourceVendorModelImpl sourceVendorModelImpl = this;

		sourceVendorModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<SourceVendor> toCacheModel() {
		SourceVendorCacheModel sourceVendorCacheModel =
			new SourceVendorCacheModel();

		sourceVendorCacheModel.sourceVendorId = getSourceVendorId();

		sourceVendorCacheModel.empName = getEmpName();

		String empName = sourceVendorCacheModel.empName;

		if ((empName != null) && (empName.length() == 0)) {
			sourceVendorCacheModel.empName = null;
		}

		sourceVendorCacheModel.empEmail = getEmpEmail();

		String empEmail = sourceVendorCacheModel.empEmail;

		if ((empEmail != null) && (empEmail.length() == 0)) {
			sourceVendorCacheModel.empEmail = null;
		}

		sourceVendorCacheModel.empMobile = getEmpMobile();

		String empMobile = sourceVendorCacheModel.empMobile;

		if ((empMobile != null) && (empMobile.length() == 0)) {
			sourceVendorCacheModel.empMobile = null;
		}

		Date empDob = getEmpDob();

		if (empDob != null) {
			sourceVendorCacheModel.empDob = empDob.getTime();
		}
		else {
			sourceVendorCacheModel.empDob = Long.MIN_VALUE;
		}

		sourceVendorCacheModel.empExperience = getEmpExperience();

		sourceVendorCacheModel.empLocation = getEmpLocation();

		String empLocation = sourceVendorCacheModel.empLocation;

		if ((empLocation != null) && (empLocation.length() == 0)) {
			sourceVendorCacheModel.empLocation = null;
		}

		sourceVendorCacheModel.cvId = getCvId();

		sourceVendorCacheModel.cvPath = getCvPath();

		String cvPath = sourceVendorCacheModel.cvPath;

		if ((cvPath != null) && (cvPath.length() == 0)) {
			sourceVendorCacheModel.cvPath = null;
		}

		sourceVendorCacheModel.statusByCustomer = getStatusByCustomer();

		String statusByCustomer = sourceVendorCacheModel.statusByCustomer;

		if ((statusByCustomer != null) && (statusByCustomer.length() == 0)) {
			sourceVendorCacheModel.statusByCustomer = null;
		}

		sourceVendorCacheModel.statusByRM = getStatusByRM();

		sourceVendorCacheModel.deployedOnCustomer = getDeployedOnCustomer();

		sourceVendorCacheModel.groupId = getGroupId();

		sourceVendorCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			sourceVendorCacheModel.createDate = createDate.getTime();
		}
		else {
			sourceVendorCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sourceVendorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sourceVendorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return sourceVendorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SourceVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SourceVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SourceVendor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SourceVendor)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SourceVendor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SourceVendor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SourceVendor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SourceVendor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, SourceVendor>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _sourceVendorId;
	private String _empName;
	private String _empEmail;
	private String _empMobile;
	private Date _empDob;
	private long _empExperience;
	private String _empLocation;
	private long _cvId;
	private String _cvPath;
	private String _statusByCustomer;
	private Boolean _statusByRM;
	private Boolean _deployedOnCustomer;
	private long _groupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private SourceVendor _escapedModel;

}