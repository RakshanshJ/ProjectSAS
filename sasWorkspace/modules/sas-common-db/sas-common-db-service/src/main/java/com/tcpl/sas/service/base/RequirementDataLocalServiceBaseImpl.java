/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tcpl.sas.service.base;

import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import com.tcpl.sas.model.RequirementData;
import com.tcpl.sas.service.RequirementDataLocalService;
import com.tcpl.sas.service.persistence.EvalVendorPersistence;
import com.tcpl.sas.service.persistence.RequirementDataPersistence;
import com.tcpl.sas.service.persistence.SkillSetPersistence;
import com.tcpl.sas.service.persistence.SourceVendorPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.annotation.versioning.ProviderType;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the requirement data local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.tcpl.sas.service.impl.RequirementDataLocalServiceImpl}.
 * </p>
 *
 * @author Rakshansh
 * @see com.tcpl.sas.service.impl.RequirementDataLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class RequirementDataLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements RequirementDataLocalService, AopService,
			   IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>RequirementDataLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.tcpl.sas.service.RequirementDataLocalServiceUtil</code>.
	 */

	/**
	 * Adds the requirement data to the database. Also notifies the appropriate model listeners.
	 *
	 * @param requirementData the requirement data
	 * @return the requirement data that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RequirementData addRequirementData(RequirementData requirementData) {
		requirementData.setNew(true);

		return requirementDataPersistence.update(requirementData);
	}

	/**
	 * Creates a new requirement data with the primary key. Does not add the requirement data to the database.
	 *
	 * @param requirementDataId the primary key for the new requirement data
	 * @return the new requirement data
	 */
	@Override
	@Transactional(enabled = false)
	public RequirementData createRequirementData(long requirementDataId) {
		return requirementDataPersistence.create(requirementDataId);
	}

	/**
	 * Deletes the requirement data with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param requirementDataId the primary key of the requirement data
	 * @return the requirement data that was removed
	 * @throws PortalException if a requirement data with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RequirementData deleteRequirementData(long requirementDataId)
		throws PortalException {

		return requirementDataPersistence.remove(requirementDataId);
	}

	/**
	 * Deletes the requirement data from the database. Also notifies the appropriate model listeners.
	 *
	 * @param requirementData the requirement data
	 * @return the requirement data that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RequirementData deleteRequirementData(
		RequirementData requirementData) {

		return requirementDataPersistence.remove(requirementData);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			RequirementData.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return requirementDataPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.tcpl.sas.model.impl.RequirementDataModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return requirementDataPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.tcpl.sas.model.impl.RequirementDataModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return requirementDataPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return requirementDataPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return requirementDataPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public RequirementData fetchRequirementData(long requirementDataId) {
		return requirementDataPersistence.fetchByPrimaryKey(requirementDataId);
	}

	/**
	 * Returns the requirement data matching the UUID and group.
	 *
	 * @param uuid the requirement data's UUID
	 * @param groupId the primary key of the group
	 * @return the matching requirement data, or <code>null</code> if a matching requirement data could not be found
	 */
	@Override
	public RequirementData fetchRequirementDataByUuidAndGroupId(
		String uuid, long groupId) {

		return requirementDataPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the requirement data with the primary key.
	 *
	 * @param requirementDataId the primary key of the requirement data
	 * @return the requirement data
	 * @throws PortalException if a requirement data with the primary key could not be found
	 */
	@Override
	public RequirementData getRequirementData(long requirementDataId)
		throws PortalException {

		return requirementDataPersistence.findByPrimaryKey(requirementDataId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(requirementDataLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RequirementData.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("requirementDataId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			requirementDataLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RequirementData.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"requirementDataId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(requirementDataLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RequirementData.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("requirementDataId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return requirementDataLocalService.deleteRequirementData(
			(RequirementData)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return requirementDataPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the requirement data matching the UUID and group.
	 *
	 * @param uuid the requirement data's UUID
	 * @param groupId the primary key of the group
	 * @return the matching requirement data
	 * @throws PortalException if a matching requirement data could not be found
	 */
	@Override
	public RequirementData getRequirementDataByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return requirementDataPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the requirement datas.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.tcpl.sas.model.impl.RequirementDataModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of requirement datas
	 * @param end the upper bound of the range of requirement datas (not inclusive)
	 * @return the range of requirement datas
	 */
	@Override
	public List<RequirementData> getRequirementDatas(int start, int end) {
		return requirementDataPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of requirement datas.
	 *
	 * @return the number of requirement datas
	 */
	@Override
	public int getRequirementDatasCount() {
		return requirementDataPersistence.countAll();
	}

	/**
	 * Updates the requirement data in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param requirementData the requirement data
	 * @return the requirement data that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RequirementData updateRequirementData(
		RequirementData requirementData) {

		return requirementDataPersistence.update(requirementData);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			RequirementDataLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		requirementDataLocalService = (RequirementDataLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RequirementDataLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RequirementData.class;
	}

	protected String getModelClassName() {
		return RequirementData.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = requirementDataPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@Reference
	protected EvalVendorPersistence evalVendorPersistence;

	protected RequirementDataLocalService requirementDataLocalService;

	@Reference
	protected RequirementDataPersistence requirementDataPersistence;

	@Reference
	protected SkillSetPersistence skillSetPersistence;

	@Reference
	protected SourceVendorPersistence sourceVendorPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetTagLocalService
		assetTagLocalService;

}